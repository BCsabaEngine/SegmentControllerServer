extends ../_base

block content

  nav.navbar.navbar-expand-lg.navbar-light.bg-light
    .container-fluid
      a.navbar-brand(href='#')
        img(src='/public/favicon/favicon-32x32.png')
        | | Layout editor
      .collapse.navbar-collapse#navbarSupportedContent
        ul.navbar-nav.me-auto.mb-2.mb-lg-0
          li.nav-item
            a.nav-link.active(aria-current='page' href='/')
              | Dashboard
          li.nav-item
            a.nav-link(href='#') Link
          li.nav-item.dropdown
            a.nav-link.dropdown-toggle#navbarDropdown(href='#' role='button' data-bs-toggle='dropdown' aria-expanded='false').
              Dropdown
            ul.dropdown-menu(aria-labelledby='navbarDropdown')
              li
                a.dropdown-item(href='#') Action
              li
                a.dropdown-item(href='#') Another action
              li
                hr.dropdown-divider
              li
                a.dropdown-item(href='#') Something else here
          li.nav-item
            a.nav-link.disabled(href='#' tabindex='-1' aria-disabled='true') Disabled

        ul#panelsave.navbar-nav.ms-auto.mb-2.mb-lg-0.hidden
          li.nav-item
            a#buttonsave.btn.btn-warning(aria-current='page' href='#' onclick='saveSegmentLocations(true)' title='CTRL+S')
              | Save layout

  div
    each segment in segments
      div(id='div' + segment.id style=`position: absolute; left: ${segment.x * gridSize}px; top: ${segment.y * gridSize + topMargin}px; width: ${segment.getSize().width * gridSize}px; height: ${segment.getSize().height * gridSize}px`)
        img(src="/layout/segment/"+segment.id)

  script(type='text/javascript').
    const topMargin = #{topMargin}
    const gridSize = #{gridSize}
    const segments = []

    let timerAutosave = null
    let downcountSuccessSave = 1
    function stopAutosaveTimer() { clearTimeout(timerAutosave) }
    function startAutosaveTimer()
    {
      stopAutosaveTimer()
      timerAutosave = setTimeout(() => { saveSegmentLocations() }, 3000)
    }
    function saveSegmentLocations(displaytoast)
    {
      stopAutosaveTimer()

      if(!$("#panelsave").is(":visible")) return

      const locations = {}
      for(const segment of segments)
      {
        const id = segment.id
        const x = segment.jelement.offset().left / gridSize
        const y = (segment.jelement.offset().top - topMargin) / gridSize
        locations[id] = {x, y}
      }
      $.post('/editor/layout/set/segmentlocations', { locations: JSON.stringify(locations) })
        .done(function() { 
          if (displaytoast && downcountSuccessSave)
          {
            ToastSuccess.fire({ html: 'Saved successfully<br/><small>(Will not appear next time)</small>' })
            downcountSuccessSave--
          }
          $('#buttonsave').removeClass('btn-danger').addClass('btn-warning')
          $('#panelsave').hide()
        })
        .fail(function(xhr, status, error) {
          if (displaytoast)
            ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
          else
            $('#buttonsave').removeClass('btn-warning').addClass('btn-danger')
          downcountSuccessSave = 1
        })
    }

    if (window.jQuery)
      $(function () {
        hotkeys('ctrl+s, command+s', function(event)
        {
          event.preventDefault()
          saveSegmentLocations(true)
        });
      })

  script(src='/assets/interactjs/interact.min.js?' + APPVERSION)
  each segment in segments
    script(type='text/javascript').
      if (window.jQuery)
        $(function () {
          const position = { x: 0, y: 0 }
          const element = document.getElementById('div#{segment.id}')
          const jelement = $('#div#{segment.id}')
          segments.push({id: #{segment.id}, jelement})

          interact(element).draggable({
            listeners: {
              start (event) {
                stopAutosaveTimer()
                //console.log(event.type, event.target)
              },
              end (event) {
                //console.log(event.type, event.target)
                //console.log(jelement.offset().top - topMargin, jelement.offset().left)
                //console.log((jelement.offset().top - topMargin) / gridSize, jelement.offset().left / gridSize)
                $('#panelsave').show()
                startAutosaveTimer()
              },
              move (event) {
                position.x += event.dx
                position.y += event.dy
                event.target.style.transform = `translate(${position.x}px, ${position.y}px)`
              },
            },
            modifiers: [
              interact.modifiers.snap({
                targets: [
                  interact.snappers.grid({ x: gridSize, y: gridSize })
                ],
                relativePoints: [ { x: 0, y: 0 } ]
              }),
              interact.modifiers.restrictRect({
                restriction: { x: 0, y: topMargin, width: 10000, height: 10000 },
                endOnly: false
              })
            ]
          })
      });
