extends ../_base

block content

  nav.navbar.navbar-expand-lg.navbar-light.bg-light(style=`height: ${topMargin}px`)
    .container-fluid
      .navbar-brand
        img(src='/public/favicon/favicon-32x32.png')
        | | Layout editor
      .collapse.navbar-collapse#navbarSupportedContent
        ul.navbar-nav.me-auto.mb-2.mb-lg-0
          li.nav-item
            a.btn.btn-secondary.active(href='/') Main screen
          li.nav-item.dropdown.ms-5
            a.nav-link.dropdown-toggle#navbarDropdown(href='#' role='button' data-bs-toggle='dropdown').
              Segments
            ul.dropdown-menu
              li
                a.dropdown-item(href='#') New...
              li
                hr.dropdown-divider
              each segment in segments
                li
                  a.dropdown-item(href='#')
                    = segment.name
                    |
                    | (#
                    = segment.id
                    | )

          li.nav-item.dropdown
            a.nav-link.dropdown-toggle#navbarDropdown(href='#' role='button' data-bs-toggle='dropdown').
              Layout settings
            ul.dropdown-menu
              li
                a.dropdown-item(href='#' onclick="setBlockSize()")
                  | Block size
                  | (
                  = blockSize
                  | x
                  = blockSize
                  | )
              li
                a.dropdown-item(href='#' onclick="setWorldColor()")
                  | World color
                  | (
                  = worldColor
                  | )
              li
                hr.dropdown-divider
              li
                a.dropdown-item(href='#' onclick="setTerrainMargin()")
                  | Terrain margin
                  | (
                  = terrainMargin
                  | px)

        ul#panelsave.navbar-nav.ms-auto.mb-2.mb-lg-0.hidden
          li.nav-item
            a#buttonsave.btn.btn-warning(href='#' onclick='saveSegmentLocations(true)' title='CTRL+S')
              | Save layout

  div
    each segment in segments
      .segment(id='div' + segment.id style=`position: absolute; left: ${segment.x * blockSize}px; top: ${segment.y * blockSize + topMargin}px`)
        img(src="/layout/segment/"+segment.id)
        ul.dropdown-menu.context-menu
          li
            a.dropdown-item(href='#')
              = segment.id
          li
            a.dropdown-item(href='#') MÃ¡sik

  script(type='text/javascript').

    initContextMenus('.segment')

    hotkeys('ctrl+s, command+s', function(event)
    {
      event.preventDefault()
      saveSegmentLocations(true)
    });

    const topMargin = #{topMargin}
    const blockSize = #{blockSize}
    const segments = []

    let timerAutosave = null
    let downcountSuccessSave = 1
    function stopAutosaveTimer() { clearTimeout(timerAutosave) }
    function startAutosaveTimer()
    {
      stopAutosaveTimer()
      timerAutosave = setTimeout(() => { saveSegmentLocations() }, 3000)
    }
    function saveSegmentLocations(displaytoast)
    {
      stopAutosaveTimer()

      if(!$("#panelsave").is(":visible")) return

      const locations = {}
      for(const segment of segments)
      {
        const id = segment.id
        const x = segment.jelement.offset().left / blockSize
        const y = (segment.jelement.offset().top - topMargin) / blockSize
        locations[id] = {x, y}
      }
      $.post('/editor/layout/set/segmentlocations', { locations: JSON.stringify(locations) })
        .done(function() { 
          if (displaytoast && downcountSuccessSave)
          {
            ToastSuccess.fire({ html: 'Saved successfully<br/><small>(Will not appear next time)</small>' })
            downcountSuccessSave--
          }
          $('#buttonsave').removeClass('btn-danger').addClass('btn-warning')
          $('#panelsave').hide()
        })
        .fail(function(xhr, status, error) {
          if (displaytoast)
            ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
          else
            $('#buttonsave').removeClass('btn-warning').addClass('btn-danger')
          downcountSuccessSave = 1
        })
    }

    async function setBlockSize()
    {
      const { value: blockSize } = await Swal.fire({
        title: 'Block size of layout',
        input: 'select',
        inputOptions: {
          16: 'Micro (16x16)',
          24: 'Small (24x24)',
          32: 'Normal (32x32)',
          48: 'Large (48x48)',
        },
        inputValue: #{blockSize},
        showCancelButton: true,
      })

      if (blockSize)
        $.post('/editor/layout/set/blocksize', { blockSize: blockSize })
          .done(function() { 
            pagereload()
          })
          .fail(function(xhr, status, error) {
            ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
          })
    }

    async function setWorldColor()
    {
      const { value: worldColor } = await Swal.fire({
        title: 'Color of world (background)',
        showCancelButton: true,
        preConfirm: () => { return document.getElementById('html5colorpicker').value },
        html: '<input type="color" id="html5colorpicker" value="#{worldColor}" style="width:50%">' 
    })

    if (worldColor)
      $.post('/editor/layout/set/worldcolor', { worldColor: worldColor })
        .done(function() { 
          pagereload()
        })
        .fail(function(xhr, status, error) {
          ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
        })
    }

    async function setTerrainMargin()
    {
      const { value: terrainMargin } = await Swal.fire({
        title: 'Margin of terrain elements',
        input: 'range',
        inputLabel: 'Margin in pixels (max. 1/4th of block size)',
        inputAttributes: {
          min: 0,
          max: #{blockSize / 4},
          step: 1
        },
        inputValue: #{terrainMargin},
        showCancelButton: true,
      })

      if (terrainMargin)
        $.post('/editor/layout/set/terrainmargin', { terrainMargin: terrainMargin })
          .done(function() { 
            pagereload()
          })
          .fail(function(xhr, status, error) {
            ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
          })
    }

  script(src='/assets/interactjs/interact.min.js?' + APPVERSION)
  each segment in segments
    script(type='text/javascript').
      if (window.jQuery)
        $(function () {
          const position = { x: 0, y: 0 }
          const element = document.getElementById('div#{segment.id}')
          const jelement = $('#div#{segment.id}')
          segments.push({id: #{segment.id}, jelement})

          interact(element).draggable({
            listeners: {
              start (event) {
                stopAutosaveTimer()
                //console.log(event.type, event.target)
              },
              end (event) {
                //console.log(event.type, event.target)
                //console.log(jelement.offset().top - topMargin, jelement.offset().left)
                //console.log((jelement.offset().top - topMargin) / blockSize, jelement.offset().left / blockSize)
                $('#panelsave').show()
                startAutosaveTimer()
              },
              move (event) {
                position.x += event.dx
                position.y += event.dy
                event.target.style.transform = `translate(${position.x}px, ${position.y}px)`
              },
            },
            modifiers: [
              interact.modifiers.snap({
                targets: [
                  interact.snappers.grid({ x: blockSize, y: blockSize })
                ],
                relativePoints: [ { x: 0, y: 0 } ]
              }),
              interact.modifiers.restrictRect({
                restriction: { x: 0, y: topMargin, width: 10000, height: 10000 },
                endOnly: false
              })
            ]
          })
      });
