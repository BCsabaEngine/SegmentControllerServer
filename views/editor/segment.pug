extends ../_base

block content

  nav.navbar.navbar-expand-lg.navbar-light.bg-light(style=`height: ${topMargin}px`)
    .container-fluid
      .navbar-brand
        img(src='/public/favicon/favicon-32x32.png')
        | Segment
        |
        b
          = segment.name
        |
        | #
        = segment.id

      .collapse.navbar-collapse
        ul.navbar-nav.me-auto.mb-2.mb-lg-0

          li.nav-item
            a.btn.btn-secondary.active(href='/editor/layout') Back to layout

          li.nav-item.dropdown.ms-5
            a.nav-link.dropdown-toggle#navbarDropdown(href='#' role='button' data-bs-toggle='dropdown').
              Tracks
            ul.dropdown-menu
              each track in tracks
                li
                  a.dropdown-item(href='#')
                    img(src=track.url width='16px')
                    | 
                    = track.name

          li.nav-item.dropdown
            a.nav-link.dropdown-toggle#navbarDropdown(href='#' role='button' data-bs-toggle='dropdown').
              Segment settings
            ul.dropdown-menu
              li
                a.dropdown-item(href='#' onclick="setBaseColor()")
                  | Base color
                  | (
                  = segment.baseColor
                  | )

          li.nav-item
            a.nav-link(href='#' onclick='toggleHelp()') Help

        ul#panelsave.navbar-nav.ms-auto.mb-2.mb-lg-0.hidden
          li.nav-item
            a#buttonsave.btn.btn-warning(href='#' onclick='saveSegmentElements(true)' title='CTRL+S')
              | Save segment

  .card#help.hidden(style=`position: absolute; width: 24rem; top: ${topMargin + 16}px; right: 16px`, onclick='hideHelp()')
    .card-body
      h6.card-title
        i.bi.bi-keyboard
        | 
        | Shortcuts
      p.card-text
        small
          | Many commands are available with keyboard shortcuts.
        dl.row
          dt.col-sm-5
            kbd
              | SHIFT + N
          dd.col-sm-7
            | New segment

          dt.col-sm-5
            kbd
              | SHIFT + S
          dd.col-sm-7
            | Save layout immediately

          dt.col-sm-5
            kbd
              | SHIFT + 1..9
          dd.col-sm-7
            | Open segment
            small
              |
              | (1-9 only)

          dt.col-sm-5
            kbd
              | SHIFT + H
          dd.col-sm-7
            | Show/hide this help

  script(type='text/javascript').

    hotkeys('ctrl+s, command+s', function(event)
    {
      event.preventDefault()
      saveSegmentElements(true)
    });
    hotkeys('shift+h', function(event){ toggleHelp() })

    function showHelp()
    {
      $("#help").fadeIn()
      setTimeout(() => $("#help").fadeOut(), 30 * 1000)
      localStorage.setItem('hideSegmentHelp', false)
    }
    function hideHelp()
    {
      $("#help").fadeOut()
      localStorage.setItem('hideSegmentHelp', true)
    }
    function toggleHelp()
    {
      if($("#help").is(":visible"))
        hideHelp()
      else
        showHelp()
    }
    if (localStorage.getItem('hideSegmentHelp') != 'true') showHelp()

    const topMargin = #{topMargin}
    const blockSize = #{blockSize}
    const segments = []

    let timerAutosave = null
    let downcountSuccessSave = 1
    function stopAutosaveTimer() { clearTimeout(timerAutosave) }
    function startAutosaveTimer()
    {
      stopAutosaveTimer()
      timerAutosave = setTimeout(() => { saveSegmentElements() }, 3000)
    }
    function saveSegmentElements(displaytoast)
    {
      stopAutosaveTimer()

      if(!$("#panelsave").is(":visible")) return

      //- const locations = {}
      //- for(const segment of segments)
      //- {
      //-   const id = segment.id
      //-   const x = segment.jelement.offset().left / blockSize
      //-   const y = (segment.jelement.offset().top - topMargin) / blockSize
      //-   locations[id] = {x, y}
      //- }
      //- $.post('/editor/layout/set/segmentlocations', { locations: JSON.stringify(locations) })
      //-   .done(function() { 
      //-     if (displaytoast && downcountSuccessSave)
      //-     {
      //-       ToastSuccess.fire({ html: 'Saved successfully<br/><small>(Will not appear next time)</small>' })
      //-       downcountSuccessSave--
      //-     }
      //-     $('#buttonsave').removeClass('btn-danger').addClass('btn-warning')
      //-     $('#panelsave').hide()
      //-   })
      //-   .fail(function(xhr, status, error) {
      //-     if (displaytoast)
      //-       ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
      //-     else
      //-       $('#buttonsave').removeClass('btn-warning').addClass('btn-danger')
      //-     downcountSuccessSave = 1
      //-   })
    }

    async function setBaseColor()
    {
      const { value: baseColor } = await Swal.fire({
        title: 'Color of plate (background)',
        showCancelButton: true,
        preConfirm: () => { return document.getElementById('html5colorpicker').value },
        html: '<input type="color" id="html5colorpicker" value="#{segment.baseColor}" style="width:50%">' 
    })

    if (baseColor)
      $.post('/editor/segment/#{segment.id}/set/baseColor', { baseColor: baseColor })
        .done(function() { 
          pagereload()
        })
        .fail(function(xhr, status, error) {
          ToastError.fire({ html: `<b>Error</b><br/>${xhr.responseText}` })
        })
    }

  script(src='/assets/interactjs/interact.min.js?' + APPVERSION)
